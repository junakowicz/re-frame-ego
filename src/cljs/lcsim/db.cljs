(ns lcsim.db)


(def A [
      [1 0] [2 0]
[0 1]             [3 1]
[0 2] [1 2] [2 2] [3 2]
[0 3]             [3 3]
[0 4]             [3 4]]) 

(def B [
[0 0] [1 0] [2 0]
[0 1]             [3 1]
[0 2] [1 2] [2 2] 
[0 3]             [3 3]
[0 4] [1 4] [2 4]]) 

(def C [
      [1 0] [2 0] [3 0]
[0 1]             
[0 2]  
[0 3]             
      [1 4] [2 4] [3 4]]) 

(def D [
  [0 0] [1 0] [2 0] 
  [0 1]             [3 1]
  [0 2]             [3 2]
  [0 3]             [3 3]
  [0 4] [1 4] [2 4]      ])

(def E [
  [0 0] [1 0] [2 0] [3 0]
  [0 1] 
  [0 2] [1 2] [2 2] 
  [0 3] 
  [0 4] [1 4] [2 4] [3 4]])

(def F [
  [0 0] [1 0] [2 0] [3 0]
  [0 1] 
  [0 2] [1 2] [2 2] 
  [0 3] 
  [0 4] ])

(def G
  [      [1 0] [2 0] [3 0]
   [0 1] 
   [0 2]       [2 2] [3 2]
   [0 3]             [3 3]
         [1 4] [2 4] [3 4]])

(def H [
  [0 0]          [3 0]
  [0 1]          [3 1]
  [0 2][1 2][2 2][3 2]
  [0 3]          [3 3]
  [0 4]          [3 4]])

(def I [
  [0 0]
  [0 1]
  [0 2]
  [0 3]
  [0 4]]) 

(def J [
                 [3 0]
                 [3 1]
                 [3 2]
  [0 3]          [3 3]
       [1 4][2 4]    ]) 

(def K [
  [0 0]          [3 0]
  [0 1]     [2 1]
  [0 2][1 2]
  [0 3]     [2 3]
  [0 4]          [3 4]]) 

(def L [
  [0 0]
  [0 1]
  [0 2]
  [0 3]
  [0 4][1 4][2 4]]) 

(def M [
  [0 0]          [3 0]
  [0 1][1 1][2 1][3 1]
  [0 2]          [3 2]
  [0 3]          [3 3]
  [0 4]          [3 4]]) 

(def N [
  [0 0]          [3 0]
  [0 1]          [3 1]
  [0 2][1 2]     [3 2]
  [0 3]     [2 3][3 3]
  [0 4]          [3 4]]) 

(def O [
       [1 0][2 0]
  [0 1]          [3 1]
  [0 2]          [3 2]
  [0 3]          [3 3]
       [1 4][2 4]]) 

(def P [
  [0 0][1 0][2 0]
  [0 1]          [3 1]
  [0 2][1 2][2 2]
  [0 3]
  [0 4]]) 

(def Q [
       [1 0][2 0]
  [0 1]          [3 1]
  [0 2]          [3 2]
  [0 3]     [2 3][3 3]
  [0 4][1 4][2 4][3 4]]) 

(def R [
  [0 0][1 0][2 0]
  [0 1]          [3 1]
  [0 2][1 2][2 2]
  [0 3]     [2 3]
  [0 4]          [3 4]]) 

(def S [
       [1 0][2 0][3 0]
  [0 1]
  [0 2][1 2][2 2]
                 [3 3]
  [0 4][1 4][2 4]]) 

(def T [
  [0 0][1 0][2 0]
       [1 1]
       [1 2]
       [1 3]
       [1 4]]) 

(def U [
  [0 0]          [3 0]
  [0 1]          [3 1]
  [0 2]          [3 2]
  [0 3]          [3 3]
  [0 4][1 4][2 4][3 4]]) 

(def V [
  [0 0]          [3 0]
  [0 1]          [3 1]
  [0 2]          [3 2]
  [0 3]          [3 3]
       [1 4][2 4]]) 

(def V [
  [0 0]          [3 0]
  [0 1]          [3 1]
  [0 2]          [3 2]
  [0 3][1 3][2 3][3 3]
       [1 4][2 4]]) 

(def X [
  [0 0]          [3 0]
  [0 1]          [3 1]
       [1 2][2 2]
       [1 3][2 3]
  [0 4]          [3 4]]) 

(def Y [
  [0 0]     [2 0]
  [0 1]     [2 1]
  [0 2][1 2][2 2]
       [1 3]
       [1 4]]) 

(def Z [
  [0 0][1 0][2 0][3 0]
                 [3 1]
            [2 2]
       [1 3]
  [0 4][1 4][2 4][3 4]]) 

(def DOT [
  [0 4]]) 

(def COMA [
  [0 3]
  [0 4]])

(def BANG [
  [0 0] 
  [0 1] 
  [0 2] 
   
  [0 4] ])

(def QUESTION [
      [1 0] [2 0]
                  [3 1]
      [1 2] [2 2] 
      
      [1 4] ])

(def BRICK [
  [0 0] [1 0] [2 0] [3 0]
  [0 1] [1 1] [2 1] [3 1]
  [0 2] [1 2] [2 2] [3 2]
  [0 3] [1 3] [2 3] [3 3]
  [0 4] [1 4] [2 4] [3 4]])


(defn offset-cells [cells-pos offset-xy]
  (let [cells-x (for [pos cells-pos] (first pos))
        cells-y (for [pos cells-pos] (second pos))
        dx (:x offset-xy)
        dy (:y offset-xy)
        tox (map #(+ dx %) cells-x)
        toy (map #(+ dy %) cells-y)]
    [tox toy]))

(defn offset-cells-to-vec [cells-pos offset-xy]
  (apply map vector (offset-cells cells-pos offset-xy))
  )

(def Ao7 (offset-cells-to-vec P {:x 5 :y 1}))
(def Ao14 (offset-cells-to-vec H {:x 10 :y 3}))
(def Bo5 (offset-cells-to-vec BRICK {:x 5 :y 0}))


(def default-db
  {:name "re-frame"
   :grid-dimensions {:w 10 :h 10}
   :marked-cells  (concat H Ao7 Ao14)
                  
                  
   :direction {:x 1 :y 0}
   })